version: 2
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - deploy:
          context: NuCypher PyPI
          requires:
            - build
          filters:
            tags:
              only: /v[0-9]+.*/
            branches:
              ignore: /.*/
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      # Commented for the time being, because requirements.txt is missing
      # (nufhe has "mandatory" extras)
      #- restore_cache:
      #    keys:
      #    - v1-dependencies-{{ checksum "requirements.txt" }}
      #    # fallback to using the latest cache if no exact match is found
      #    - v1-dependencies-

      # PyOpenCL needs CL headers to be installed.
      #- run:
      #    name: install dependencies
      #    # installing `numpy` separately, because otherwise pyopencl installation fails
      #    command: |
      #      python3 -m venv venv
      #      . venv/bin/activate
      #      pip install numpy
      #      pip install .[pyopencl,dev]

      #- save_cache:
      #    paths:
      #      - ./venv
      #    key: v1-dependencies-{{ checksum "requirements.txt" }}

      # Test run requires a GPU, so it fails on CircleCI. Disabling for the time being.
      #- run:
      #    name: run tests
      #    command: |
      #      . venv/bin/activate
      #      pytest -v -m "not perf"

      - store_artifacts:
          path: test-reports
          destination: test-reports

  deploy:
    docker:
      - image: circleci/python:3.6.1
    steps:
      - checkout
      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: create packages
          command: |
            python3 setup.py sdist
            python3 setup.py bdist_wheel
      - run:
          name: upload to pypi
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install twine
            twine upload dist/* -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD"
